# Set shell interpreter for commands
set shell zsh
set shellopts '-euy'

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
# zsh does not split words by default as described here, which makes it difficult to work with $fs and $fx variables, but a compatibility option named shwordsplit (-y or --sh-word-split) is provided for this purpose. You can set this option for all commands as such

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# Warn about nested instances
& if [ $LF_LEVEL -gt 1 ]; then lf -remote "send $id echoerr 'Warning: Running in a nested lf instance!'"; fi

# default already
set filesep "\n" 

### Set refresh rate
set period 1

# Set icons
set icons

# Enable Borders
set drawbox
# leave some space at the top and the bottom of the screen
#set scrolloff 10

# Put lf into background
map <c-z> $ kill -STOP $PPID

### Set hidden files to be visible
set hidden
### Set shortcut to set hidden visibility on/off
#map . set hidden!

### Use '.' to enter a shell
map . shell

### Enable file and directory information
set info size
set dircounts

### Clear mark from files after pasting
map p : paste; clear

# Map esc to quit/command mode
map <esc> quit

# use enter for shell commands
#map <enter> shell
map <enter> open

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# show the result of execution of previous commands
map ` !true

# mkdir command. See wiki if you want it to select created dir
map s :push %mkdir<space>
map S :push %touch<space>

map e $$EDITOR "$f"
map E $$PAGER "$f"
map w $$SHELL

# Make rename behaves more like vim
# Rename with the cursor placed at the extension 
map i rename
# Rename with the cursor placed at the beginning
map I :rename; cmd-home
# Rename with the cursor placed at the end
map a :rename; cmd-end
# Rename with the cursor placed at the end
map A :rename; cmd-end
# Rename with the portion before the extension deleted
map r :rename; cmd-delete-home
# Rename with the entire filename deleted
map R :rename; cmd-end; cmd-delete-home

set mouse true

# Follow symlinks
cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}
map gL follow_link

### Define a parent directory move in a up/down direction from the current directory
### Without moving the view
cmd move-parent &{{
    dironly="setlocal '$(dirname "$PWD")' dironly"
    lf -remote "send $id :updir; $dironly true; $1; $dironly false; open"
}}

map J move-parent down
map K move-parent up

cmd settings ${{
  env | grep ^lf_ | sort | $PAGER
}}

### This part needs to have ranger installed as that is what provides dependencies such as 
### ranger api, rifle, scope.sh

### Use scope.sh from ranger as defined in ~/.config/ranger/scope.sh and use it for previews
set previewer ~/.config/lf/scope-lf-wrapper.sh
map U $LESSOPEN='| ~/.config/lf/scope-lf-wrapper.sh %s' less -R $f

set cleaner ~/.config/lf/cleaner

set sixel true

### Set to open to work with rifle.conf as stored in ~/.config/ranger/rifle.conf
### Need to overwrite orginal `open` cmd
cmd open $set -f; rifle -p 0 "$fx"

### Define command to view all the opener method options in rifle
### Need to overwrite orginal mapping
cmd open-with ${{
    set -f
    if [ -n "${TMUX-}" ]; then
      execute() {
        exec tmux new-window -a -- "$@"
      }
    else
      execute() {
        exec "$@"
      }
    fi
    method=$(rifle -l $fx | sed -e "s/:[a-zA-Z]*:[a-zA-Z]*:/ \| /" | fzf \
      --no-sort --disabled --layout=reverse \
      --no-info --prompt="Open with > " \
      --bind=change:clear-query \
      --bind=q:abort \
      --bind=j:down,k:up \
      --bind=d:half-page-down,u:half-page-up \
      --bind=space:page-down,backspace:page-up \
      --bind=g:first,G:last \
      --bind=f:jump,jump:accept \
      --tmux | sed -e 's/ |.*//g')  
    [ -n "${method}" ] && execute rifle -p $method $fx
}}
map o open-with
map O open-with

### Map c/C to clear always the selected files/dirs
cmd clear_unselect ${{
  rm ~/.local/share/lf/files 2>/dev/null
  lf -remote "send clear" 
  lf -remote "send unselect"
}}

map c clear_unselect
map C clear_unselect

### Deleting files will put them under the XDG TRASH spec, if trash-cli is installed
cmd trash ${{
  if [[ "$(command -v trash-put)" ]]; then
    trash-put $fx
  else
    mkdir -p ~/.trash
    mv -- $fx ~/.trash
  fi
}}

map t trash
map T trash
map <delete> trash

### Here use b/B tp remap the original function of the t mapping
#map b bookmark
#map B bookmark

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
#map o &mimeopen $f
#map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
#cmd open &{{
#    case $(file --mime-type -Lb $f) in
#        text/*) lf -remote "send $id \$$EDITOR \$fx";;
#        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
#    esac
#}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
  set -f
  case $f in
      *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
      *.tar.gz|*.tgz) tar xzvf $f;;
      *.tar.xz|*.txz) tar xJvf $f;;
      *.zip) unzip $f;;
      *.rar) unrar x $f;;
      *.7z) 7z x $f;;
  esac
}}

cmd multiextract ${{
  set -f
  for file in $fx; do
    case $file in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $file;;
        *.tar.gz|*.tgz) tar xzvf $file;;
        *.tar.xz|*.txz) tar xJvf $file;;
        *.zip) unzip $file;;
        *.rar) unrar x $file;;
        *.7z) 7z x $file;;
    esac
  done
  rm ~/.local/share/lf/files 2>/dev/null
  lf -remote "send clear" 
  lf -remote "send unselect"
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
  set -f
  filename=$1
  mkdir "${filename}_tmp"
  rsync -avz $fx "${filename}_tmp"
  tar czf "${filename}".tgz "${filename}_tmp"
  rm -rf "${filename}_tmp"
}}

# compress current file or selected files with zip
cmd zip ${{
  set -f
  filename=$1
  mkdir "${filename}_tmp"
  rsync -avz $fx "${filename}_tmp"
  zip -r "${filename}".zip "${filename}_tmp"
  rm -rf "${filename}_tmp"
}}

cmd on-quit &{{
  if [ -p "$FIFO_UEBERZUG" ]; then
    exec 3>&-
    rm -- "$FIFO_UEBERZUG"
  fi
}}

